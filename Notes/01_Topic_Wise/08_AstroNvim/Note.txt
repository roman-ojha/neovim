*) Requirements:
  -> https://github.com/AstroNvim/AstroNvim#-requirements
  1> Nerd Fonts:
  2> Neovim 0.8+
  3> Tree-sitter CLI (to use nvim-treesitter)
    -> for this to run we need MingGW Toolchain c/c++ compiler using 'https://www.msys2.org/'
      -> for more info: https://github.com/nvim-treesitter/nvim-treesitter/wiki/Windows-support
      -> https://github.com/nvim-treesitter/nvim-treesitter#requirements
    -> Also:
      -> npm install -g tree-sitter-cli

*) Setup:
    -> https://github.com/AstroNvim/AstroNvim
    -> https://astronvim.com/
    -> clone repo int ~/AppData/Local/nvim
    -> nvim
    -> If you will getting some error after you run 'nvim' then  delete everything inside 'nvim-data' folder
    
    *)Setup user configuration:
        -> clone: https://github.com/AstroNvim/user_example inside './lua/user'
        
    *) To configure Plugins in astro:
        -> we can create a files with any name inside the 'plugins' directory
        -> EX: for 'treesitter'
            -> inside here it returns the configuration for plugins
            -> ex, for treesitter you have to install language parser individually, we can add them inside 'ensure_installed'
            -> or we can use ':TSInstall <>'
            return {
              "nvim-treesitter/nvim-treesitter", -- here we have to specify the plugins that we want to use
              opts = {
                -- ensure_installed = { "lua" },
              },
            }
        -> EX: for 'mason.lua', it contain the configuration for multiple plugin inside the table
            -> mason plugins manages the external editor tooling such as 'LSP', 'Linters', 'Formatter' & 'Debuggers'
            *) for 'mason-lspconfig.nvim':
                -> inside 'opts' we can add multiple packages as you want to install/use, or use can use :LspInstall <package>
            *) for 'mason-null-ls.nvim':
                -> this is similar to lsp config but design for tools that don't have a language server, such as formatter and linters.
                -> you can add a source using 'ensure_installed' or use the ':NullLsInstall <>'
            *) mason-nvim-dap:
                -> Debug adapter protocol, enable language debuggers
                -> you can use 'ensure_installed' to install adapter or you can use ':DapInstall' to install and adapter
            return {
                  -- use mason-lspconfig to configure LSP installations
                  {
                    "williamboman/mason-lspconfig.nvim",
                    -- overrides `require("mason-lspconfig").setup(...)`
                    opts = {
                      -- ensure_installed = { "lua_ls" },
                    },
                  },
                  -- use mason-null-ls to configure Formatters/Linter installation for null-ls sources
                  {
                    "jay-babu/mason-null-ls.nvim",
                    -- overrides `require("mason-null-ls").setup(...)`
                    opts = {
                      -- ensure_installed = { "prettier", "stylua" },
                    },
                  },
                  {
                    "jay-babu/mason-nvim-dap.nvim",
                    -- overrides `require("mason-nvim-dap").setup(...)`
                    opts = {
                      -- ensure_installed = { "python" },
                    },
                  },
                }

    *) Let's Install our first plugins
        -> for now we will install: https://github.com/folke/todo-comments.nvim
        -> get the plugin name usually it will be it's github repo: 'folke/todo-comments.nvim'
        -> If the plugins have some dependencies the we have to add them as well
        -> some times dependencies are listed under packers requires
        -> we can chose our own plugin file name inside './lua' but we will use 'user.lua' file and add this:
              {
                "folke/todo-comments.nvim", -- we will first write the plugins name
                dependencies = { "nvim-lua/plenary.nvim" }, -- then add it's dependencies
                config = function() -- and set the config field which is called when initializing the plugins
                  require("todo-comments").setup {
                      -- you can use setup method to configure plugins
                  }
                end
                -- opts = {} -- alternative way of 'config' field, which automatically calls the setup method with the arguments pass
              }
    
    *) Lazy Loading:
        -> By default the plugin manager will lazy load the plugins to improve performance
        -> Plugins are not loaded by default
        -> Plugins are lazy loaded when required
        -> Plugins can be loaded from:
            -> Events
            -> Commands
            -> Keys
        -> Lazy loading can be disabled with 'lazy = false'
              {
                "folke/todo-comments.nvim",
                dependencies = { "nvim-lua/plenary.nvim" },
                opts = {}
                cmd = {"TodoQuickFix"},
                keys = {
                  { "<leader>T", "<cmd>TodoTelescope<cr>", desc = "Open Todos in Telescope" },
                },
              }
            *) Events
                -> in above case to have to lazy load when the file is open in that case we can use the 'User AstroFile' event
                -> You can see list of Lazy load event inside './Lazy Events.png'
            *) Commands
                -> we can also you 'Commands' to lazy load the plugins EX:
                    -> :TodoQuickFix to sell the the todo lists
                    -> to load the plugins when you run the command you can add the commands like "TodoQuickFix" into 'cmd' field
            *) Keys
                -> we can also create mappings using the 'keys' options which will also load the plugin
                -> here we are mapping '<leader>T' with the given command
    
    *) AstroNvim Community:
        ->  https://github.com/AstroNvim/astrocommunity
        -> it also contain the community for configuring the plugins using astro community
        -> with just a single line of code you can install and configure various plugins for project managements, utilities, colorscheme, and language packs
        -> EX:
            -> just by adding an import for the  typescript pack in the '/plugins/community.lua' file
                  {import = "astrocommunity.pack.typescript"},

                -> file: https://github.com/AstroNvim/astrocommunity/blob/main/lua/astrocommunity/pack/typescript/typescript.lua
                -> it will install the additional plugins according to the added pack
                

*) Features/Usage Overview
    1) which-key
        -> if we will just press the <leader> key
        -> we can see all the key mapping that I can use
        -> This include the custom mapping as well
        -> The 'Items' listed in blue color are submenus where we can see additional mapping for the for that Menu
        -> EX: for the 'Find Files' inside Telescope we can use '<leader>ff'
            -> then 'ctrl+up' & 'ctrl+down' to scroll with files
        -> we can use '?' to see all the list of mappings available inside telescope
    2) Telescope
    3) Buffers
    4) neo-tree
    5) Splits
    6) Git Integration
        -> Green Indicate Addition
        -> Red Indicate Deletion
        -> Orange Indicate Changes
        -> We can integrate LazyGit: https://github.com/jesseduffield/lazygit
    7) Language support
        -> it can support multiple language
        -> while coding it can so use a language  server report diagnostics and show type a we code
    8) Terminal
    9) Sessions
        -> It can store the state of what we are doing inside the neovim we use it for future
    10) Mouse
        -> We can use mouse for a lot of task as well
    11) Folding
    